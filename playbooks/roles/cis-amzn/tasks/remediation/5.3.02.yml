---

- name: Set check facts
  set_fact:
    cis_code: &cis_code '5.3.2'
    cis_name: &cis_name Ensure lockout for failed password attempts is configured
    cis_profile: &cis_profile level-1
    cis_scored: &cis_scored scored
    cis_section: &cis_section section-5
  tags:
    - always

- name: CIS {{ cis_code }} - {{ cis_name }}
  block:

  - name: "APPLY | {{ cis_code }} - configure regexep"
    set_fact:
      regex_001: '^auth\s+(\S.+\S)\s+(pam_unix.so)((\s*$)|(\s+\S.*$))'
      regex_002: '^auth\s+(\S.+\S)\s+(pam_faillock.so)\s+((preauth)\s+(\S.+))$'
      regex_003: '^auth\s+(\S.+\S)\s+(pam_faillock.so)\s+((authfail)\s+(\S.+))$'
      regex_004: '^auth\s+(\S.+\S)\s+(pam_faillock.so)\s+((authsucc)\s+(\S.+))$'
    tags:
      - apply

  - name: "APPLY | {{ cis_code }} - configure lines"
    set_fact:
      line_001: 'auth        [success=1 default=bad] pam_unix.so'
      line_002: 'auth        required      pam_faillock.so preauth audit silent deny=5 unlock_time=900'
      line_003: 'auth        [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900'
      line_004: 'auth        sufficient    pam_faillock.so authsucc audit deny=5 unlock_time=900'
    tags:
      - apply

  - name: "APPLY | {{ cis_code }} - configure files"
    set_fact:
      files:
        - /etc/pam.d/password-auth
        - /etc/pam.d/system-auth
    tags:
      - apply
      
  # Nail all the requirements to the pam_unix.so auth line.
  # The result is going to be like this:
  # ...
  # [002] auth required pam_faillock.so preauth audit silent deny=5 unlock_time=900
  # [001] auth [success=1 default=bad] pam_unix.so
  # [003] auth [default=die] pam_faillock.so authfail audit deny=5 unlock_time=900
  # [004] auth sufficient pam_faillock.so authsucc audit deny=5 unlock_time=900
  # ...

  - name: "APPLY | {{ cis_code }} - update rules 001."
    lineinfile:
      path: "{{ item }}"
      regexp: "{{ regex_001 }}"
      line: "{{ line_001 }}"
      state: present
      backup: 'no'
      backrefs: 'no'
      create: 'no'
      firstmatch: 'yes'
      # TODO: validation
      validate: '/bin/env true %s'
    with_items: "{{ files }}"
    register: cis_apply_tmp_001
    tags:
      - apply

  - name: "APPLY | {{ cis_code }} - update rules 002."
    lineinfile:
      path: "{{ item }}"
      regexp: "{{ regex_002 }}"
      line: "{{ line_002 }}"
      insertbefore: "{{ regex_001 }}"
      state: present
      backup: 'no'
      backrefs: 'no'
      create: 'no'
      # This is important.
      firstmatch: 'yes'
      # TODO: validation
      validate: '/bin/env true %s'
    with_items: "{{ files }}"
    register: cis_apply_tmp_002
    tags:
      - apply

  - name: "APPLY | {{ cis_code }} - update rules 003"
    lineinfile:
      path: "{{ item }}"
      regexp: "{{ regex_003 }}"
      line: "{{ line_003 }}"
      insertafter: "{{ regex_001 }}"
      state: present
      backup: 'no'
      backrefs: 'no'
      create: 'no'
      # This is important.
      firstmatch: 'no'
      # TODO: validation
      validate: '/bin/env true %s'
    with_items: "{{ files }}"
    register: cis_apply_tmp_003
    tags:
      - apply

  - name: "APPLY | {{ cis_code }} - update rules 004"
    lineinfile:
      path: "{{ item }}"
      regexp: "{{ regex_004 }}"
      line: "{{ line_004 }}"
      insertafter: "{{ regex_003 }}"
      state: present
      backup: 'no'
      backrefs: 'no'
      create: 'no'
      # This is important.
      firstmatch: 'no'
      # TODO: validation
      validate: '/bin/env true %s'
    with_items: "{{ files }}"
    register: cis_apply_tmp_004
    tags:
      - apply

  - name: "APPLY | {{ cis_code }} - clean facts"
    set_fact:
      regex_001:
      regex_002:
      regex_003:
      regex_004:
      line_001:
      line_002:
      line_003:
      line_004:
      files:
    tags:
      - apply

  - name: "APPLY | {{ cis_code }} - set apply fact."
    set_fact: 
      "cis_{{ cis_code | regex_replace('[.]','_') }}_apply":
        - "{{ cis_apply_tmp_001 }}"
        - "{{ cis_apply_tmp_002 }}"
        - "{{ cis_apply_tmp_003 }}"
        - "{{ cis_apply_tmp_004 }}"
    tags:
      - apply

  #- name: "APPLY | {{ cis_code }} - print apply fact."
  #  debug:
  #    var: "cis_{{ cis_code | regex_replace('[.]','_') }}_apply"
  #  tags:
  #    - apply

  # TODO: Proper postchecks. At the moment only some keywords tested
  - name: "POST | {{ cis_code }} - PAM faillock"
    shell: |
      grep pam_faillock.so {{ item }}
    with_items:
      - /etc/pam.d/password-auth
      - /etc/pam.d/system-auth
    register: cis_post_tmp
    changed_when: False
    failed_when:
      cis_post_tmp.rc!=0 or
      not (cis_post_tmp.stdout is search('preauth')) or
      not (cis_post_tmp.stdout is search('authfail')) or
      not (cis_post_tmp.stdout is search('authsucc')) or
      cis_post_tmp.stderr|length>0 or
      cis_post_tmp.stdout_lines|length<3
    tags:
      - post
    
  - name: "POST | {{ cis_code }} - set post fact."
    set_fact: {"cis_{{ cis_code | regex_replace('[.]','_') }}_post":"{{ cis_post_tmp }}"}
    tags:
      - post
    
  tags:
    - *cis_profile
    - *cis_section
    - *cis_code
    - *cis_scored

...
