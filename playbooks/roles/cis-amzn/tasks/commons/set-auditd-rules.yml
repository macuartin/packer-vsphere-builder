---

# TODO: validate

- name: "APPLY | {{ cis_code }} - add configuration key"
  lineinfile:
    path: "{{ audit_rules }}"
    regexp: "^\\s*#\\s*Filter:.*{{ filter | regex_escape }}.*CIS:.*$"
    line: "# Filter: {{ filter }} CIS: {{ cis_code }}."
    state: present
    backup: no
    backrefs: no
    create: no
  register: cis_apply_tmp
  tags:
    - apply

- name: "APPLY | {{ cis_code }} - update configuration"
  lineinfile:
    path: "{{ audit_rules }}"
    regexp: "^\\s*{{ item | regex_escape }}\\s*-k\\s*{{ filter | regex_escape }}\\s*$"
    line: "{{ item }} -k {{ filter}}"
    state: present  
    backup: no
    backrefs: no
    create: no
    insertafter: "^\\s*#\\s*Filter:.*{{ filter | regex_escape }}.*CIS:.*"
  with_items: "{{ rules }}"
  register: cis_apply_tmp
  tags:
    - apply

- name: "APPLY | {{ cis_code }} - set apply fact"
  set_fact: {"cis_{{ cis_code | regex_replace('[.]','_') }}_apply":"{{ cis_apply_tmp }}"}
  tags:
    - apply

- name: "APPLY | {{ cis_code }} - restart service"
  service:
    name: auditd
    state: restarted
  register: cis_tmp_restart
  when:
    ansible_distribution_version not in ["(Karoo)", "7.6", "7.7"]
  tags:
    - apply

- name: "APPLY | {{ cis_code }} - restart service"
  shell: |
    /sbin/auditctl -R {{ audit_rules }}
  # service:
  #   name: auditd
  #   state: restarted
  #   use: service
  register: cis_tmp_restart
  when:
    ansible_distribution_version in ["(Karoo)", "7.6", "7.7"]
  tags:
    - apply

  # Fail if no rules were created
- name: "POST | {{ cis_code }} - get current config values"
  shell: |
    grep {{ filter }} {{ audit_rules }}
  failed_when: >-
    cis_post_tmp.rc != 0
    or not cis_post_tmp.stdout is search(filter)
    or cis_post_tmp.stderr|length>0
  register: cis_post_tmp
  tags:
    - post

  # Fail if service is not enabled
- name: "POST | {{ cis_code }} - get service status"
  shell: |
    auditctl -s
  failed_when: >-
    cis_post_tmp.rc != 0
    or not cis_post_tmp.stdout is search('enabled')
    or cis_post_tmp.stderr|length>0
  register: cis_post_tmp
  tags:
    - post

# TODO: Check exact rules presence
  # Fail if there are no rules active
- name: "POST | {{ cis_code }} - get current runtime values"
  shell: |
    auditctl -l -k {{ filter }}
  failed_when: >-
    cis_post_tmp.rc != 0
    or not cis_post_tmp.stdout is search(filter)
    or cis_post_tmp.stderr|length>0
  register: cis_post_tmp
  tags:
    - post

- name: "POST | {{ cis_code }} - set post fact"
  set_fact: {"cis_{{ cis_code | regex_replace('[.]','_') }}_post":"{{ cis_post_tmp }}"}
  tags:
    - post

- name: "POST | {{ cis_code }} - print runtime"
  debug:
    var: cis_post_tmp
  tags:
    - post
    - debug

...
